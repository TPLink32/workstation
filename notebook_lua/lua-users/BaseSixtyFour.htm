<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML><HEAD><TITLE>lua-users wiki: Base Sixty Four</TITLE>
<LINK TYPE="text/css" REL="stylesheet" HREF="main.css" tppabs="http://lua-users.org/styles/main.css">
</HEAD>
<BODY ><table width="100%" border="0"> <tr><td align=left width="100%"><h1><a href="javascript:if(confirm(%27http://lua-users.org/cgi-bin/wiki.pl?action=search&string=BaseSixtyFour&body=1  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a path excluded by the site\%27s Robot Exclusion parameters.  (Teleport Ultra\%27s compliance with this system is optional; see the Project Properties, Netiquette page.)  \n\nDo you want to open it from the server?%27))window.location=%27http://lua-users.org/cgi-bin/wiki.pl?action=search&string=BaseSixtyFour&body=1%27" tppabs="http://lua-users.org/cgi-bin/wiki.pl?action=search&string=BaseSixtyFour&body=1" title="List pages referring to BaseSixtyFour">Base Sixty Four</a></h1></td><td align=right>
    <table cellpadding="0" cellspacing="0" border="0" width="1%">
      <tbody>
        <tr>
            <td><a href="javascript:if(confirm(%27http://lua-users.org/  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27http://lua-users.org/%27" tppabs="http://lua-users.org/">
            <img src="nav-logo.png" tppabs="http://lua-users.org/images/nav-logo.png" alt="lua-users home" width="177" height="40" border="0"></a></td>
        </tr>
        <tr>
            <td>
            <table cellpadding="0" cellspacing="0" border="0" width="100%">
                <tbody>
                <tr>
                    <td><img src="nav-elbow.png" tppabs="http://lua-users.org/images/nav-elbow.png" alt="" width="48" height="40"></td>
                    <td nowrap valign="middle" width="100%">
                        <a href="index.htm" tppabs="http://lua-users.org/wiki/" class="nav">wiki</a></td>
                </tr>
                </tbody>
            </table>
            </td>
        </tr>
      </tbody>
    </table>
<form method="post" action="http://lua-users.org/wiki/FindPage" enctype="application/x-www-form-urlencoded" style="display:inline; margin:0;">
<input type="hidden" name="action" value="search"  /><input type="text" name="string"  size="20" style="" id="search_query1" /><input type="hidden" name="title" value="1"  /><input type="submit" name=".submit" value="Search" /><input type="hidden" name="body" value="on"  /></form></td></tr> </table>
<br clear=all>
The following implementation provides some samples of Base64 encoder/decoder functions (for background see <a href="javascript:if(confirm(%27http://en.wikipedia.org/wiki/Base64  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27http://en.wikipedia.org/wiki/Base64%27" tppabs="http://en.wikipedia.org/wiki/Base64">[Wikipedia: Base64]</a>).<p>
Since the last implementation, I had a small competition for the smallest Base64 codec in <a href="JavaScript.htm" tppabs="http://lua-users.org/wiki/JavaScript" >JavaScript</a> - converting the new results to lua gave the following, very small as fast codec:<p>
<DL>
<dt><dd><pre class="code">
#!/usr/bin/env lua
<span class="comment">-- Lua 5.1+ base64 v3.0 (c) 2009 by Alex Kloss &lt;alexthkloss@web.de&gt;</span>
<span class="comment">-- licensed under the terms of the LGPL2</span>

<span class="comment">-- character table string</span>
<span class="keyword">local</span> b=<span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span>

<span class="comment">-- encoding</span>
<span class="keyword">function</span> enc(data)
    <span class="keyword">return</span> ((data:gsub(<span class="string">'.'</span>, <span class="keyword">function</span>(x) 
        <span class="keyword">local</span> r,b=<span class="string">''</span>,x:byte()
        <span class="keyword">for</span> i=8,1,-1 <span class="keyword">do</span> r=r..(b%2^i-b%2^(i-1)&gt;0 <span class="keyword">and</span> <span class="string">'1'</span> <span class="keyword">or</span> <span class="string">'0'</span>) <span class="keyword">end</span>
        <span class="keyword">return</span> r;
    <span class="keyword">end</span>)..<span class="string">'0000'</span>):gsub(<span class="string">'%d%d%d?%d?%d?%d?'</span>, <span class="keyword">function</span>(x)
        <span class="keyword">if</span> (#x &lt; 6) <span class="keyword">then</span> <span class="keyword">return</span> <span class="string">''</span> <span class="keyword">end</span>
        <span class="keyword">local</span> c=0
        <span class="keyword">for</span> i=1,6 <span class="keyword">do</span> c=c+(x:sub(i,i)==<span class="string">'1'</span> <span class="keyword">and</span> 2^(6-i) <span class="keyword">or</span> 0) <span class="keyword">end</span>
        <span class="keyword">return</span> b:sub(c+1,c+1)
    <span class="keyword">end</span>)..({ <span class="string">''</span>, <span class="string">'=='</span>, <span class="string">'='</span> })[#data%3+1])
<span class="keyword">end</span>

<span class="comment">-- decoding</span>
<span class="keyword">function</span> dec(data)
    data = <span class="library">string.gsub</span>(data, <span class="string">'[^'</span>..b..<span class="string">'=]'</span>, <span class="string">''</span>)
    <span class="keyword">return</span> (data:gsub(<span class="string">'.'</span>, <span class="keyword">function</span>(x)
        <span class="keyword">if</span> (x == <span class="string">'='</span>) <span class="keyword">then</span> <span class="keyword">return</span> <span class="string">''</span> <span class="keyword">end</span>
        <span class="keyword">local</span> r,f=<span class="string">''</span>,(b:find(x)-1)
        <span class="keyword">for</span> i=6,1,-1 <span class="keyword">do</span> r=r..(f%2^i-f%2^(i-1)&gt;0 <span class="keyword">and</span> <span class="string">'1'</span> <span class="keyword">or</span> <span class="string">'0'</span>) <span class="keyword">end</span>
        <span class="keyword">return</span> r;
    <span class="keyword">end</span>):gsub(<span class="string">'%d%d%d?%d?%d?%d?%d?%d?'</span>, <span class="keyword">function</span>(x)
        <span class="keyword">if</span> (#x ~= 8) <span class="keyword">then</span> <span class="keyword">return</span> <span class="string">''</span> <span class="keyword">end</span>
        <span class="keyword">local</span> c=0
        <span class="keyword">for</span> i=1,8 <span class="keyword">do</span> c=c+(x:sub(i,i)==<span class="string">'1'</span> <span class="keyword">and</span> 2^(8-i) <span class="keyword">or</span> 0) <span class="keyword">end</span>
        <span class="keyword">return</span> <span class="library">string.char</span>(c)
    <span class="keyword">end</span>))
<span class="keyword">end</span>

<span class="comment">-- command line if not called as library</span>
<span class="keyword">if</span> (arg ~= <span class="keyword">nil</span>) <span class="keyword">then</span>
	<span class="keyword">local</span> func = <span class="string">'enc'</span>
	<span class="keyword">for</span> n,v <span class="keyword">in</span> <span class="library">ipairs</span>(arg) <span class="keyword">do</span>
		<span class="keyword">if</span> (n &gt; 0) <span class="keyword">then</span>
			<span class="keyword">if</span> (v == <span class="string">"-h"</span>) <span class="keyword">then</span> <span class="library">print</span> <span class="string">"base64.lua [-e] [-d] text/data"</span> <span class="keyword">break</span>
			<span class="keyword">elseif</span> (v == <span class="string">"-e"</span>) <span class="keyword">then</span> func = <span class="string">'enc'</span>
			<span class="keyword">elseif</span> (v == <span class="string">"-d"</span>) <span class="keyword">then</span> func = <span class="string">'dec'</span>
			<span class="keyword">else</span> <span class="library">print</span>(<span class="library">_G</span>[func](v)) <span class="keyword">end</span>
		<span class="keyword">end</span>
	<span class="keyword">end</span>
<span class="keyword">else</span>
	<span class="library">module</span>(<span class="string">'base64'</span>,<span class="library">package.seeall</span>)
<span class="keyword">end</span>
</pre>
</DL>
<p>
Base64 is also implemented in the <code>b64</code>/<code>unb64</code> methods in LuaSocket<a href="javascript:if(confirm(%27http://lua-users.org/cgi-bin/wiki.pl?action=edit&id=LuaSocket  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a path excluded by the site\%27s Robot Exclusion parameters.  (Teleport Ultra\%27s compliance with this system is optional; see the Project Properties, Netiquette page.)  \n\nDo you want to open it from the server?%27))window.location=%27http://lua-users.org/cgi-bin/wiki.pl?action=edit&id=LuaSocket%27" tppabs="http://lua-users.org/cgi-bin/wiki.pl?action=edit&id=LuaSocket" >?</a> (<a href="javascript:if(confirm(%27http://www.cs.princeton.edu/~diego/professional/luasocket/mime.html  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27http://www.cs.princeton.edu/~diego/professional/luasocket/mime.html#b64%27" tppabs="http://www.cs.princeton.edu/~diego/professional/luasocket/mime.html#b64">[1]</a>), but you may still want to use this snippet for its few requirements -- and it is a nice example with educational value for how to perform logical operations without actual bit-shift or OR operators.<p>
I want to apologize if somebody encountered a serious error with the former version of base64 - Not all logical functions can be easily replaced with mathematical ones, so I had to find a way around. The following code is not as fast as the mime C-Module - yet on smaller values the loading time can make a program slower, too. Find the newest (and corrected) version here:<p>
<DL>
<dt><dd><pre class="code">
#!/usr/bin/env lua
<span class="comment">-- working lua base64 codec (c) 2006-2008 by Alex Kloss</span>
<span class="comment">-- compatible with lua 5.1</span>
<span class="comment">-- http://www.it-rfc.de</span>
<span class="comment">-- licensed under the terms of the LGPL2</span>

<span class="comment">-- bitshift functions (&lt;&lt;, &gt;&gt; equivalent)</span>
<span class="comment">-- shift left</span>
<span class="keyword">function</span> lsh(value,shift)
	<span class="keyword">return</span> (value*(2^shift)) % 256
<span class="keyword">end</span>

<span class="comment">-- shift right</span>
<span class="keyword">function</span> rsh(value,shift)
	<span class="keyword">return</span> <span class="library">math.floor</span>(value/2^shift) % 256
<span class="keyword">end</span>

<span class="comment">-- return single bit (for OR)</span>
<span class="keyword">function</span> bit(x,b)
	<span class="keyword">return</span> (x % 2^b - x % 2^(b-1) &gt; 0)
<span class="keyword">end</span>

<span class="comment">-- logic OR for number values</span>
<span class="keyword">function</span> lor(x,y)
	result = 0
	<span class="keyword">for</span> p=1,8 <span class="keyword">do</span> result = result + (((bit(x,p) <span class="keyword">or</span> bit(y,p)) == <span class="keyword">true</span>) <span class="keyword">and</span> 2^(p-1) <span class="keyword">or</span> 0) <span class="keyword">end</span>
	<span class="keyword">return</span> result
<span class="keyword">end</span>

<span class="comment">-- encryption table</span>
<span class="keyword">local</span> base64chars = {[0]=<span class="string">'A'</span>,[1]=<span class="string">'B'</span>,[2]=<span class="string">'C'</span>,[3]=<span class="string">'D'</span>,[4]=<span class="string">'E'</span>,[5]=<span class="string">'F'</span>,[6]=<span class="string">'G'</span>,[7]=<span class="string">'H'</span>,[8]=<span class="string">'I'</span>,[9]=<span class="string">'J'</span>,[10]=<span class="string">'K'</span>,[11]=<span class="string">'L'</span>,[12]=<span class="string">'M'</span>,[13]=<span class="string">'N'</span>,[14]=<span class="string">'O'</span>,[15]=<span class="string">'P'</span>,[16]=<span class="string">'Q'</span>,[17]=<span class="string">'R'</span>,[18]=<span class="string">'S'</span>,[19]=<span class="string">'T'</span>,[20]=<span class="string">'U'</span>,[21]=<span class="string">'V'</span>,[22]=<span class="string">'W'</span>,[23]=<span class="string">'X'</span>,[24]=<span class="string">'Y'</span>,[25]=<span class="string">'Z'</span>,[26]=<span class="string">'a'</span>,[27]=<span class="string">'b'</span>,[28]=<span class="string">'c'</span>,[29]=<span class="string">'d'</span>,[30]=<span class="string">'e'</span>,[31]=<span class="string">'f'</span>,[32]=<span class="string">'g'</span>,[33]=<span class="string">'h'</span>,[34]=<span class="string">'i'</span>,[35]=<span class="string">'j'</span>,[36]=<span class="string">'k'</span>,[37]=<span class="string">'l'</span>,[38]=<span class="string">'m'</span>,[39]=<span class="string">'n'</span>,[40]=<span class="string">'o'</span>,[41]=<span class="string">'p'</span>,[42]=<span class="string">'q'</span>,[43]=<span class="string">'r'</span>,[44]=<span class="string">'s'</span>,[45]=<span class="string">'t'</span>,[46]=<span class="string">'u'</span>,[47]=<span class="string">'v'</span>,[48]=<span class="string">'w'</span>,[49]=<span class="string">'x'</span>,[50]=<span class="string">'y'</span>,[51]=<span class="string">'z'</span>,[52]=<span class="string">'0'</span>,[53]=<span class="string">'1'</span>,[54]=<span class="string">'2'</span>,[55]=<span class="string">'3'</span>,[56]=<span class="string">'4'</span>,[57]=<span class="string">'5'</span>,[58]=<span class="string">'6'</span>,[59]=<span class="string">'7'</span>,[60]=<span class="string">'8'</span>,[61]=<span class="string">'9'</span>,[62]=<span class="string">'-'</span>,[63]=<span class="string">'_'</span>}

<span class="comment">-- function encode</span>
<span class="comment">-- encodes input string to base64.</span>
<span class="keyword">function</span> enc(data)
	<span class="keyword">local</span> bytes = {}
	<span class="keyword">local</span> result = <span class="string">""</span>
	<span class="keyword">for</span> spos=0,<span class="library">string.len</span>(data)-1,3 <span class="keyword">do</span>
		<span class="keyword">for</span> byte=1,3 <span class="keyword">do</span> bytes[byte] = <span class="library">string.byte</span>(<span class="library">string.sub</span>(data,(spos+byte))) <span class="keyword">or</span> 0 <span class="keyword">end</span>
		result = <span class="library">string.format</span>(<span class="string">'%s%s%s%s%s'</span>,result,base64chars[rsh(bytes[1],2)],base64chars[lor(lsh((bytes[1] % 4),4), rsh(bytes[2],4))] <span class="keyword">or</span> <span class="string">"="</span>,((#data-spos) &gt; 1) <span class="keyword">and</span> base64chars[lor(lsh(bytes[2] % 16,2), rsh(bytes[3],6))] <span class="keyword">or</span> <span class="string">"="</span>,((#data-spos) &gt; 2) <span class="keyword">and</span> base64chars[(bytes[3] % 64)] <span class="keyword">or</span> <span class="string">"="</span>)
	<span class="keyword">end</span>
	<span class="keyword">return</span> result
<span class="keyword">end</span>

<span class="comment">-- decryption table</span>
<span class="keyword">local</span> base64bytes = {[<span class="string">'A'</span>]=0,[<span class="string">'B'</span>]=1,[<span class="string">'C'</span>]=2,[<span class="string">'D'</span>]=3,[<span class="string">'E'</span>]=4,[<span class="string">'F'</span>]=5,[<span class="string">'G'</span>]=6,[<span class="string">'H'</span>]=7,[<span class="string">'I'</span>]=8,[<span class="string">'J'</span>]=9,[<span class="string">'K'</span>]=10,[<span class="string">'L'</span>]=11,[<span class="string">'M'</span>]=12,[<span class="string">'N'</span>]=13,[<span class="string">'O'</span>]=14,[<span class="string">'P'</span>]=15,[<span class="string">'Q'</span>]=16,[<span class="string">'R'</span>]=17,[<span class="string">'S'</span>]=18,[<span class="string">'T'</span>]=19,[<span class="string">'U'</span>]=20,[<span class="string">'V'</span>]=21,[<span class="string">'W'</span>]=22,[<span class="string">'X'</span>]=23,[<span class="string">'Y'</span>]=24,[<span class="string">'Z'</span>]=25,[<span class="string">'a'</span>]=26,[<span class="string">'b'</span>]=27,[<span class="string">'c'</span>]=28,[<span class="string">'d'</span>]=29,[<span class="string">'e'</span>]=30,[<span class="string">'f'</span>]=31,[<span class="string">'g'</span>]=32,[<span class="string">'h'</span>]=33,[<span class="string">'i'</span>]=34,[<span class="string">'j'</span>]=35,[<span class="string">'k'</span>]=36,[<span class="string">'l'</span>]=37,[<span class="string">'m'</span>]=38,[<span class="string">'n'</span>]=39,[<span class="string">'o'</span>]=40,[<span class="string">'p'</span>]=41,[<span class="string">'q'</span>]=42,[<span class="string">'r'</span>]=43,[<span class="string">'s'</span>]=44,[<span class="string">'t'</span>]=45,[<span class="string">'u'</span>]=46,[<span class="string">'v'</span>]=47,[<span class="string">'w'</span>]=48,[<span class="string">'x'</span>]=49,[<span class="string">'y'</span>]=50,[<span class="string">'z'</span>]=51,[<span class="string">'0'</span>]=52,[<span class="string">'1'</span>]=53,[<span class="string">'2'</span>]=54,[<span class="string">'3'</span>]=55,[<span class="string">'4'</span>]=56,[<span class="string">'5'</span>]=57,[<span class="string">'6'</span>]=58,[<span class="string">'7'</span>]=59,[<span class="string">'8'</span>]=60,[<span class="string">'9'</span>]=61,[<span class="string">'-'</span>]=62,[<span class="string">'_'</span>]=63,[<span class="string">'='</span>]=<span class="keyword">nil</span>}

<span class="comment">-- function decode</span>
<span class="comment">-- decode base64 input to string</span>
<span class="keyword">function</span> dec(data)
	<span class="keyword">local</span> chars = {}
	<span class="keyword">local</span> result=<span class="string">""</span>
	<span class="keyword">for</span> dpos=0,<span class="library">string.len</span>(data)-1,4 <span class="keyword">do</span>
		<span class="keyword">for</span> char=1,4 <span class="keyword">do</span> chars[char] = base64bytes[(<span class="library">string.sub</span>(data,(dpos+char),(dpos+char)) <span class="keyword">or</span> <span class="string">"="</span>)] <span class="keyword">end</span>
		result = <span class="library">string.format</span>(<span class="string">'%s%s%s%s'</span>,result,<span class="library">string.char</span>(lor(lsh(chars[1],2), rsh(chars[2],4))),(chars[3] ~= <span class="keyword">nil</span>) <span class="keyword">and</span> <span class="library">string.char</span>(lor(lsh(chars[2],4), rsh(chars[3],2))) <span class="keyword">or</span> <span class="string">""</span>,(chars[4] ~= <span class="keyword">nil</span>) <span class="keyword">and</span> <span class="library">string.char</span>(lor(lsh(chars[3],6) % 192, (chars[4]))) <span class="keyword">or</span> <span class="string">""</span>)
	<span class="keyword">end</span>
	<span class="keyword">return</span> result
<span class="keyword">end</span>

<span class="comment">-- command line if not called as library</span>
<span class="keyword">if</span> (arg ~= <span class="keyword">nil</span>) <span class="keyword">then</span>
	<span class="keyword">local</span> func = <span class="string">'enc'</span>
	<span class="keyword">for</span> n,v <span class="keyword">in</span> <span class="library">ipairs</span>(arg) <span class="keyword">do</span>
		<span class="keyword">if</span> (n &gt; 0) <span class="keyword">then</span>
			<span class="keyword">if</span> (v == <span class="string">"-h"</span>) <span class="keyword">then</span> <span class="library">print</span> <span class="string">"base64.lua [-e] [-d] text/data"</span> <span class="keyword">break</span>
			<span class="keyword">elseif</span> (v == <span class="string">"-e"</span>) <span class="keyword">then</span> func = <span class="string">'enc'</span>
			<span class="keyword">elseif</span> (v == <span class="string">"-d"</span>) <span class="keyword">then</span> func = <span class="string">'dec'</span>
			<span class="keyword">else</span> <span class="library">print</span>(<span class="library">_G</span>[func](v)) <span class="keyword">end</span>
		<span class="keyword">end</span>
	<span class="keyword">end</span>
<span class="keyword">else</span>
	<span class="library">module</span>(<span class="string">'base64'</span>,<span class="library">package.seeall</span>)
<span class="keyword">end</span>
</pre>
</DL>
<p>
See also the same version but compatible with lua 5.0.<p>
<DL>
<dt><dd><pre class="code">
<span class="comment">-- working lua base64 codec (c) 2006-2008 by Alex Kloss</span>
<span class="comment">-- compatible with lua 5.0</span>
<span class="comment">-- http://www.it-rfc.de</span>
<span class="comment">-- licensed under the terms of the LGPL2</span>

<span class="comment">-- bitshift functions (&lt;&lt;, &gt;&gt; equivalent)</span>
<span class="comment">-- shift left</span>
<span class="keyword">function</span> lsh(value,shift)
	<span class="keyword">return</span> <span class="library">math.mod</span>((value*(2^shift)), 256)
<span class="keyword">end</span>

<span class="comment">-- shift right</span>
<span class="keyword">function</span> rsh(value,shift)
	<span class="keyword">return</span> <span class="library">math.mod</span>(<span class="library">math.floor</span>(value/2^shift), 256)
<span class="keyword">end</span>

<span class="comment">-- return single bit (for OR)</span>
<span class="keyword">function</span> bit(x,b)
	<span class="keyword">return</span> (<span class="library">math.mod</span>(x, 2^b) - <span class="library">math.mod</span>(x, 2^(b-1)) &gt; 0)
<span class="keyword">end</span>

<span class="comment">-- logic OR for number values</span>
<span class="keyword">function</span> lor(x,y)
	result = 0
	<span class="keyword">for</span> p=1,8 <span class="keyword">do</span> result = result + (((bit(x,p) <span class="keyword">or</span> bit(y,p)) == <span class="keyword">true</span>) <span class="keyword">and</span> 2^(p-1) <span class="keyword">or</span> 0) <span class="keyword">end</span>
	<span class="keyword">return</span> result
<span class="keyword">end</span>

<span class="comment">-- encryption table</span>
<span class="keyword">local</span> base64chars = {[0]=<span class="string">'A'</span>,[1]=<span class="string">'B'</span>,[2]=<span class="string">'C'</span>,[3]=<span class="string">'D'</span>,[4]=<span class="string">'E'</span>,[5]=<span class="string">'F'</span>,[6]=<span class="string">'G'</span>,[7]=<span class="string">'H'</span>,[8]=<span class="string">'I'</span>,[9]=<span class="string">'J'</span>,[10]=<span class="string">'K'</span>,[11]=<span class="string">'L'</span>,[12]=<span class="string">'M'</span>,[13]=<span class="string">'N'</span>,[14]=<span class="string">'O'</span>,[15]=<span class="string">'P'</span>,[16]=<span class="string">'Q'</span>,[17]=<span class="string">'R'</span>,[18]=<span class="string">'S'</span>,[19]=<span class="string">'T'</span>,[20]=<span class="string">'U'</span>,[21]=<span class="string">'V'</span>,[22]=<span class="string">'W'</span>,[23]=<span class="string">'X'</span>,[24]=<span class="string">'Y'</span>,[25]=<span class="string">'Z'</span>,[26]=<span class="string">'a'</span>,[27]=<span class="string">'b'</span>,[28]=<span class="string">'c'</span>,[29]=<span class="string">'d'</span>,[30]=<span class="string">'e'</span>,[31]=<span class="string">'f'</span>,[32]=<span class="string">'g'</span>,[33]=<span class="string">'h'</span>,[34]=<span class="string">'i'</span>,[35]=<span class="string">'j'</span>,[36]=<span class="string">'k'</span>,[37]=<span class="string">'l'</span>,[38]=<span class="string">'m'</span>,[39]=<span class="string">'n'</span>,[40]=<span class="string">'o'</span>,[41]=<span class="string">'p'</span>,[42]=<span class="string">'q'</span>,[43]=<span class="string">'r'</span>,[44]=<span class="string">'s'</span>,[45]=<span class="string">'t'</span>,[46]=<span class="string">'u'</span>,[47]=<span class="string">'v'</span>,[48]=<span class="string">'w'</span>,[49]=<span class="string">'x'</span>,[50]=<span class="string">'y'</span>,[51]=<span class="string">'z'</span>,[52]=<span class="string">'0'</span>,[53]=<span class="string">'1'</span>,[54]=<span class="string">'2'</span>,[55]=<span class="string">'3'</span>,[56]=<span class="string">'4'</span>,[57]=<span class="string">'5'</span>,[58]=<span class="string">'6'</span>,[59]=<span class="string">'7'</span>,[60]=<span class="string">'8'</span>,[61]=<span class="string">'9'</span>,[62]=<span class="string">'-'</span>,[63]=<span class="string">'_'</span>}

<span class="comment">-- function encode</span>
<span class="comment">-- encodes input string to base64.</span>
<span class="keyword">function</span> enc(data)
	<span class="keyword">local</span> bytes = {}
	<span class="keyword">local</span> result = <span class="string">""</span>
	<span class="keyword">for</span> spos=0,<span class="library">string.len</span>(data)-1,3 <span class="keyword">do</span>
		<span class="keyword">for</span> byte=1,3 <span class="keyword">do</span> bytes[byte] = <span class="library">string.byte</span>(<span class="library">string.sub</span>(data,(spos+byte))) <span class="keyword">or</span> 0 <span class="keyword">end</span>
		result = <span class="library">string.format</span>(<span class="string">'%s%s%s%s%s'</span>,
			result,
			base64chars[rsh(bytes[1],2)],
			base64chars[lor(lsh((<span class="library">math.mod</span>(bytes[1], 4)),4), rsh(bytes[2],4))] <span class="keyword">or</span> <span class="string">"="</span>,
			((<span class="library">string.len</span>(data)-spos) &gt; 1) <span class="keyword">and</span> base64chars[lor(lsh(
				<span class="library">math.mod</span>(bytes[2], 16)
			,2), rsh(bytes[3],6))] <span class="keyword">or</span> <span class="string">"="</span>,
			((<span class="library">string.len</span>(data)-spos) &gt; 2) <span class="keyword">and</span> base64chars[(<span class="library">math.mod</span>(bytes[3], 64))] <span class="keyword">or</span> <span class="string">"="</span>
		)
	<span class="keyword">end</span>
	<span class="keyword">return</span> result
<span class="keyword">end</span>

<span class="comment">-- decryption table</span>
<span class="keyword">local</span> base64bytes = {[<span class="string">'A'</span>]=0,[<span class="string">'B'</span>]=1,[<span class="string">'C'</span>]=2,[<span class="string">'D'</span>]=3,[<span class="string">'E'</span>]=4,[<span class="string">'F'</span>]=5,[<span class="string">'G'</span>]=6,[<span class="string">'H'</span>]=7,[<span class="string">'I'</span>]=8,[<span class="string">'J'</span>]=9,[<span class="string">'K'</span>]=10,[<span class="string">'L'</span>]=11,[<span class="string">'M'</span>]=12,[<span class="string">'N'</span>]=13,[<span class="string">'O'</span>]=14,[<span class="string">'P'</span>]=15,[<span class="string">'Q'</span>]=16,[<span class="string">'R'</span>]=17,[<span class="string">'S'</span>]=18,[<span class="string">'T'</span>]=19,[<span class="string">'U'</span>]=20,[<span class="string">'V'</span>]=21,[<span class="string">'W'</span>]=22,[<span class="string">'X'</span>]=23,[<span class="string">'Y'</span>]=24,[<span class="string">'Z'</span>]=25,[<span class="string">'a'</span>]=26,[<span class="string">'b'</span>]=27,[<span class="string">'c'</span>]=28,[<span class="string">'d'</span>]=29,[<span class="string">'e'</span>]=30,[<span class="string">'f'</span>]=31,[<span class="string">'g'</span>]=32,[<span class="string">'h'</span>]=33,[<span class="string">'i'</span>]=34,[<span class="string">'j'</span>]=35,[<span class="string">'k'</span>]=36,[<span class="string">'l'</span>]=37,[<span class="string">'m'</span>]=38,[<span class="string">'n'</span>]=39,[<span class="string">'o'</span>]=40,[<span class="string">'p'</span>]=41,[<span class="string">'q'</span>]=42,[<span class="string">'r'</span>]=43,[<span class="string">'s'</span>]=44,[<span class="string">'t'</span>]=45,[<span class="string">'u'</span>]=46,[<span class="string">'v'</span>]=47,[<span class="string">'w'</span>]=48,[<span class="string">'x'</span>]=49,[<span class="string">'y'</span>]=50,[<span class="string">'z'</span>]=51,[<span class="string">'0'</span>]=52,[<span class="string">'1'</span>]=53,[<span class="string">'2'</span>]=54,[<span class="string">'3'</span>]=55,[<span class="string">'4'</span>]=56,[<span class="string">'5'</span>]=57,[<span class="string">'6'</span>]=58,[<span class="string">'7'</span>]=59,[<span class="string">'8'</span>]=60,[<span class="string">'9'</span>]=61,[<span class="string">'-'</span>]=62,[<span class="string">'_'</span>]=63,[<span class="string">'='</span>]=<span class="keyword">nil</span>}

<span class="comment">-- function decode</span>
<span class="comment">-- decode base64 input to string</span>
<span class="keyword">function</span> dec(data)
	<span class="keyword">local</span> chars = {}
	<span class="keyword">local</span> result=<span class="string">""</span>
	<span class="keyword">for</span> dpos=0,<span class="library">string.len</span>(data)-1,4 <span class="keyword">do</span>
		<span class="keyword">for</span> char=1,4 <span class="keyword">do</span> chars[char] = base64bytes[(<span class="library">string.sub</span>(data,(dpos+char),(dpos+char)) <span class="keyword">or</span> <span class="string">"="</span>)] <span class="keyword">end</span>
		result = <span class="library">string.format</span>(<span class="string">'%s%s%s%s'</span>,
			result,
			<span class="library">string.char</span>(lor(lsh(chars[1],2), rsh(chars[2],4))),
			(chars[3] ~= <span class="keyword">nil</span>) <span class="keyword">and</span> <span class="library">string.char</span>(lor(lsh(chars[2],4), rsh(chars[3],2))) <span class="keyword">or</span> <span class="string">""</span>,
			(chars[4] ~= <span class="keyword">nil</span>) <span class="keyword">and</span> <span class="library">string.char</span>(lor(<span class="library">math.mod</span>(lsh(chars[3],6), 192), (chars[4]))) <span class="keyword">or</span> <span class="string">""</span>
		)
	<span class="keyword">end</span>
	<span class="keyword">return</span> result
<span class="keyword">end</span>

<span class="comment">-- command line if not called as library</span>
<span class="keyword">if</span> (arg ~= <span class="keyword">nil</span>) <span class="keyword">then</span>
	<span class="keyword">local</span> func = <span class="string">'enc'</span>
	<span class="keyword">for</span> n,v <span class="keyword">in</span> <span class="library">ipairs</span>(arg) <span class="keyword">do</span>
		<span class="keyword">if</span> (n &gt; 0) <span class="keyword">then</span>
			<span class="keyword">if</span> (v == <span class="string">"-h"</span>) <span class="keyword">then</span> <span class="library">print</span> <span class="string">"base64.lua [-e] [-d] text/data"</span> <span class="keyword">break</span>
			<span class="keyword">elseif</span> (v == <span class="string">"-e"</span>) <span class="keyword">then</span> func = <span class="string">'enc'</span>
			<span class="keyword">elseif</span> (v == <span class="string">"-d"</span>) <span class="keyword">then</span> func = <span class="string">'dec'</span>
			<span class="keyword">else</span> <span class="library">print</span>(<span class="library">_G</span>[func](v)) <span class="keyword">end</span>
		<span class="keyword">end</span>
	<span class="keyword">end</span>
<span class="keyword">else</span>
	<span class="library">module</span>(<span class="string">'base64'</span>,<span class="library">package.seeall</span>)
<span class="keyword">end</span>
</pre>
</DL>
<p>
<p>
On a further notice, I received a mail from someone using my code without acknowledgement of my copyright and license. If you need another license as explicitly stated in the code, feel free to contact me on my email address.<p>
<p>
<H3>Using binary operators in Lua 5.3</H3>
<p>
<p>
I wrote the snippet below today to speed up the base64 encoding in myapplication using the new binary operators in Lua5.3, it might be of use forothers.  I think the algorithm is pretty much optimal, but I'm open to anysuggestions and improvements.<p>
Every three input bytes are mapped to four output bytes using the binaryoperations below:<p>
<pre>        
         a                   b                   c
  +-----------------+-----------------+-----------------+
  | 0 0 0 0 0 0 1 1 | 1 1 1 1 2 2 2 2 | 2 2 3 3 3 3 3 3 |
  +|- - - - - -|- - + - - - -|- - - - + - -|- - - - - -|+
  /           /              |              \           \
 /           /               |               \           \
     a&gt;&gt;2     (a&amp;3)&lt;&lt;4|b&gt;&gt;4    (b&amp;15)&lt;&lt;2|c&gt;&gt;6      c&amp;63
</pre><p>
The input is padded to always be a multiple of three bytes, the output paddingwith '='s is fixed up after calculating the base64 of the padded input string.<p>
<pre class="code">

<span class="keyword">local</span> bs = { [0] =
   <span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>,<span class="string">'F'</span>,<span class="string">'G'</span>,<span class="string">'H'</span>,<span class="string">'I'</span>,<span class="string">'J'</span>,<span class="string">'K'</span>,<span class="string">'L'</span>,<span class="string">'M'</span>,<span class="string">'N'</span>,<span class="string">'O'</span>,<span class="string">'P'</span>,
   <span class="string">'Q'</span>,<span class="string">'R'</span>,<span class="string">'S'</span>,<span class="string">'T'</span>,<span class="string">'U'</span>,<span class="string">'V'</span>,<span class="string">'W'</span>,<span class="string">'X'</span>,<span class="string">'Y'</span>,<span class="string">'Z'</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,
   <span class="string">'g'</span>,<span class="string">'h'</span>,<span class="string">'i'</span>,<span class="string">'j'</span>,<span class="string">'k'</span>,<span class="string">'l'</span>,<span class="string">'m'</span>,<span class="string">'n'</span>,<span class="string">'o'</span>,<span class="string">'p'</span>,<span class="string">'q'</span>,<span class="string">'r'</span>,<span class="string">'s'</span>,<span class="string">'t'</span>,<span class="string">'u'</span>,<span class="string">'v'</span>,
   <span class="string">'w'</span>,<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'z'</span>,<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>,<span class="string">'+'</span>,<span class="string">'/'</span>,
}

<span class="keyword">local</span> <span class="keyword">function</span> base64(s)
   <span class="keyword">local</span> byte, rep = <span class="library">string.byte</span>, <span class="library">string.rep</span>
   <span class="keyword">local</span> pad = 2 - ((#s-1) % 3)
   s = (s..rep(<span class="string">'\0'</span>, pad)):gsub(<span class="string">"..."</span>, <span class="keyword">function</span>(cs)
      <span class="keyword">local</span> a, b, c = byte(cs, 1, 3)
      <span class="keyword">return</span> bs[a&gt;&gt;2] .. bs[(a&amp;3)&lt;&lt;4|b&gt;&gt;4] .. bs[(b&amp;15)&lt;&lt;2|c&gt;&gt;6] .. bs[c&amp;63]
   <span class="keyword">end</span>)
   <span class="keyword">return</span> s:sub(1, #s-pad) .. rep(<span class="string">'='</span>, pad)
<span class="keyword">end</span>


<span class="library">assert</span>(base64(<span class="string">""</span>) == <span class="string">""</span>)
<span class="library">assert</span>(base64(<span class="string">"f"</span>) == <span class="string">"Zg=="</span>)
<span class="library">assert</span>(base64(<span class="string">"fo"</span>) == <span class="string">"Zm8="</span>)
<span class="library">assert</span>(base64(<span class="string">"foo"</span>) == <span class="string">"Zm9v"</span>)
<span class="library">assert</span>(base64(<span class="string">"foob"</span>) == <span class="string">"Zm9vYg=="</span>)
<span class="library">assert</span>(base64(<span class="string">"fooba"</span>) == <span class="string">"Zm9vYmE="</span>)
<span class="library">assert</span>(base64(<span class="string">"foobar"</span>) == <span class="string">"Zm9vYmFy"</span>)
</pre>
<p>
<H2>See Also</H2>
<UL>
<li> <a href="javascript:if(confirm(%27https://github.com/ErnieE5/ee5_base64  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27https://github.com/ErnieE5/ee5_base64%27" tppabs="https://github.com/ErnieE5/ee5_base64">[ee5_base64]</a> faster natural Lua 5.2 base64 encoding/decoding<li> <a href="javascript:if(confirm(%27http://www.tecgraf.puc-rio.br/~lhf/ftp/lua/  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27http://www.tecgraf.puc-rio.br/~lhf/ftp/lua/#lbase64%27" tppabs="http://www.tecgraf.puc-rio.br/~lhf/ftp/lua/#lbase64">[lbase64]</a> lhf's lbase64 library (Lua library implemented in C)<li> <a href="javascript:if(confirm(%27http://www.cs.princeton.edu/~diego/professional/luasocket/mime.html  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27http://www.cs.princeton.edu/~diego/professional/luasocket/mime.html#b64%27" tppabs="http://www.cs.princeton.edu/~diego/professional/luasocket/mime.html#b64">[luasocket/mime.html#b64]</a> base64 in LuaSocket<a href="javascript:if(confirm(%27http://lua-users.org/cgi-bin/wiki.pl?action=edit&id=LuaSocket  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a path excluded by the site\%27s Robot Exclusion parameters.  (Teleport Ultra\%27s compliance with this system is optional; see the Project Properties, Netiquette page.)  \n\nDo you want to open it from the server?%27))window.location=%27http://lua-users.org/cgi-bin/wiki.pl?action=edit&id=LuaSocket%27" tppabs="http://lua-users.org/cgi-bin/wiki.pl?action=edit&id=LuaSocket" >?</a> (Lua library implemented in C)<li> <a href="javascript:if(confirm(%27http://libb64.sourceforge.net/  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27http://libb64.sourceforge.net/%27" tppabs="http://libb64.sourceforge.net/">http://libb64.sourceforge.net/</a> is a fast, public domain base64 encoder/decoder.  It's implemented in a coroutine-like style in C.  Something similar might be done in Lua, perhaps using real coroutines, or you could bind directly to this library (or just use the base64 routines in luasocket mentioned above).<li> Lua/APR provides <a href="javascript:if(confirm(%27http://peterodding.com/code/lua/apr/docs/  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27http://peterodding.com/code/lua/apr/docs/#base64_encoding%27" tppabs="http://peterodding.com/code/lua/apr/docs/#base64_encoding">[base64 encoding and decoding functions]</a> (wraps APR functions in C).<li> <a href="RiscluaExamples.htm" tppabs="http://lua-users.org/wiki/RiscluaExamples" >RiscluaExamples</a> shows base64 encoding/decoding functions in <a href="RiscLua.htm" tppabs="http://lua-users.org/wiki/RiscLua" >RiscLua</a>. This might be of interest syntactically: <a href="RiscLua.htm" tppabs="http://lua-users.org/wiki/RiscLua" >RiscLua</a> adds bit-twiddling operators (&amp;, |, ^^, ~, &gt;&gt;, &lt;&lt;) to the VM. <code>\</code> and <code>=&gt;</code> are alternatives for <code>function</code> and <code>return</code>.</UL>
<hr>
<a href="RecentChanges.htm" tppabs="http://lua-users.org/wiki/RecentChanges" >RecentChanges</a> &middot; <a href="javascript:if(confirm(%27http://lua-users.org/cgi-bin/wiki.pl?action=editprefs  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a path excluded by the site\%27s Robot Exclusion parameters.  (Teleport Ultra\%27s compliance with this system is optional; see the Project Properties, Netiquette page.)  \n\nDo you want to open it from the server?%27))window.location=%27http://lua-users.org/cgi-bin/wiki.pl?action=editprefs%27" tppabs="http://lua-users.org/cgi-bin/wiki.pl?action=editprefs" >preferences</a><br>
<a href="javascript:if(confirm(%27http://lua-users.org/cgi-bin/wiki.pl?action=edit&id=BaseSixtyFour  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a path excluded by the site\%27s Robot Exclusion parameters.  (Teleport Ultra\%27s compliance with this system is optional; see the Project Properties, Netiquette page.)  \n\nDo you want to open it from the server?%27))window.location=%27http://lua-users.org/cgi-bin/wiki.pl?action=edit&id=BaseSixtyFour%27" tppabs="http://lua-users.org/cgi-bin/wiki.pl?action=edit&id=BaseSixtyFour" >edit</a> &middot; <a href="javascript:if(confirm(%27http://lua-users.org/cgi-bin/wiki.pl?action=history&id=BaseSixtyFour  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a path excluded by the site\%27s Robot Exclusion parameters.  (Teleport Ultra\%27s compliance with this system is optional; see the Project Properties, Netiquette page.)  \n\nDo you want to open it from the server?%27))window.location=%27http://lua-users.org/cgi-bin/wiki.pl?action=history&id=BaseSixtyFour%27" tppabs="http://lua-users.org/cgi-bin/wiki.pl?action=history&id=BaseSixtyFour" >history</a><br>Last edited November 4, 2014 5:56 pm GMT <a href="javascript:if(confirm(%27http://lua-users.org/cgi-bin/wiki.pl?action=browse&diff=1&id=BaseSixtyFour  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a path excluded by the site\%27s Robot Exclusion parameters.  (Teleport Ultra\%27s compliance with this system is optional; see the Project Properties, Netiquette page.)  \n\nDo you want to open it from the server?%27))window.location=%27http://lua-users.org/cgi-bin/wiki.pl?action=browse&diff=1&id=BaseSixtyFour%27" tppabs="http://lua-users.org/cgi-bin/wiki.pl?action=browse&diff=1&id=BaseSixtyFour" >(diff)</a>
</body>
</html>