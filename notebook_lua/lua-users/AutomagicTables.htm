<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML><HEAD><TITLE>lua-users wiki: Automagic Tables</TITLE>
<LINK TYPE="text/css" REL="stylesheet" HREF="/styles/main.css">
</HEAD>
<BODY ><table width="100%" border="0"> <tr><td align=left width="100%"><h1><a href="/cgi-bin/wiki.pl?action=search&amp;string=AutomagicTables&amp;body=1" title="List pages referring to AutomagicTables">Automagic Tables</a></h1></td><td align=right>
    <table cellpadding="0" cellspacing="0" border="0" width="1%">
      <tbody>
        <tr>
            <td><a href="/">
            <img src="/images/nav-logo.png" alt="lua-users home" width="177" height="40" border="0"></a></td>
        </tr>
        <tr>
            <td>
            <table cellpadding="0" cellspacing="0" border="0" width="100%">
                <tbody>
                <tr>
                    <td><img src="/images/nav-elbow.png" alt="" width="48" height="40"></td>
                    <td nowrap valign="middle" width="100%">
                        <a href="/wiki/" class="nav">wiki</a></td>
                </tr>
                </tbody>
            </table>
            </td>
        </tr>
      </tbody>
    </table>
<form method="post" action="http://lua-users.org/wiki/FindPage" enctype="application/x-www-form-urlencoded" style="display:inline; margin:0;">
<input type="hidden" name="action" value="search"  /><input type="text" name="string"  size="20" style="" id="search_query1" /><input type="hidden" name="title" value="1"  /><input type="submit" name=".submit" value="Search" /><input type="hidden" name="body" value="on"  /></form></td></tr> </table>
<br clear=all>
Building on some of the techniques illustrated in <a href="/wiki/FuncTables" >FuncTables</a>, here are some implementations of Perl-style<a href="http://www.stonehenge.com/merlyn/UnixReview/col44.html">[1]</a> automagic tables (also called autovivication). An automagic table creates subtables on demand, as it were; i.e.:<p>
<DL>
<dt><dd><pre class="code">
a = AutomagicTable()
a.b.c.d = <span class="string">"a.b and a.b.c are automatically created"</span>
</pre>
</DL>
<p>
This version was the result of several interesting interchanges between <a href="/wiki/ThomasWrensch" >ThomasWrensch</a> and me (<a href="/wiki/RiciLake" >RiciLake</a>), and I cannot take credit for it (although I am happy to take the blame; I've made a couple of modifications and changed the formatting because I like spaces in parameter lists)<p>
<DL>
<dt><dd><pre class="code">
<span class="keyword">do</span>
  <span class="keyword">local</span> auto, assign

  <span class="keyword">function</span> auto(tab, key)
    <span class="keyword">return</span> <span class="library">setmetatable</span>({}, {
            __index = auto,
            __newindex = assign,
            parent = tab,
            key = key
    })
  <span class="keyword">end</span>

  <span class="keyword">local</span> meta = {__index = auto}

  <span class="comment">-- The if statement below prevents the table from being</span>
  <span class="comment">-- created if the value assigned is nil. This is, I think,</span>
  <span class="comment">-- technically correct but it might be desirable to use</span>
  <span class="comment">-- assignment to nil to force a table into existence.</span>

  <span class="keyword">function</span> assign(tab, key, val)
  <span class="comment">-- if val ~= nil then</span>
    <span class="keyword">local</span> oldmt = <span class="library">getmetatable</span>(tab)
    oldmt.parent[oldmt.key] = tab
    <span class="library">setmetatable</span>(tab, meta)
    tab[key] = val
  <span class="comment">-- end</span>
  <span class="keyword">end</span>

  <span class="keyword">function</span> AutomagicTable()
    <span class="keyword">return</span> <span class="library">setmetatable</span>({}, meta)
  <span class="keyword">end</span>
<span class="keyword">end</span>
</pre>
</DL>
<p>
<hr>A comment made by <a href="/wiki/ThomasWrensch" >ThomasWrensch</a> seemed relevant, I quote it without permission so I hope he doesn't mind:<p>
<em>I think the technique above -- the use of an individualized metatable with additional non-metamethod keys -- is more than just a handy trick.</em><p>
<em>If you want to associate some information with a table you have three choices:</em><p>
<DL>
<dt><dd><em>1. Put a key in the table with the information</em><dt><dd><em>2. Use the table as a key in another (possibly weak) table.</em><dt><dd><em>3. Associate it with the metatable.</em></DL>
<p>
<em>The problem with the first trick is it may conflict with an existing key and/or pollute the table with inappropriate data. You pointed out some of the problems with the second approach in your message</em> (on <a href="/wiki/GarbageCollectingWeakTables" >GarbageCollectingWeakTables</a>) <em>a while ago. The third requires the use of an individual metatable, but does not have the problems of the other two techniques.</em><p>
<em>-- <a href="/wiki/ThomasWrensch" >ThomasWrensch</a></em><p>
<p>
Another implementation, with a limited depth for generating tables;<p>
<DL>
<dt><dd><pre class="code">
<span class="comment">-- index function to do the magic</span>
<span class="keyword">local</span> autotable__index = <span class="keyword">function</span>(self, key)
  <span class="keyword">local</span> mt = <span class="library">getmetatable</span>(self)
  <span class="keyword">local</span> t = {}
  <span class="keyword">if</span> mt.depth ~= 1 <span class="keyword">then</span>
    <span class="library">setmetatable</span>(t, { __index = mt.__index, depth = mt.depth - 1})
  <span class="keyword">end</span>
  self[key] = t
  <span class="keyword">return</span> t
<span class="keyword">end</span>

<span class="comment">--- Creates a new auto-table. </span>
<span class="comment">-- @param depth (optional, default 1) how deep to auto-generate tables. The last</span>
<span class="comment">-- table in the chain generated will itself not be an auto-table. If `depth == 0` then</span>
<span class="comment">-- there is no limit.</span>
<span class="comment">-- @return new auto-table</span>
<span class="keyword">function</span> newautotable(depth)
  <span class="keyword">return</span> <span class="library">setmetatable</span>({}, {__index = autotable__index, depth = depth })
<span class="keyword">end</span>

<span class="comment">--- Checks a table to be an auto-table</span>
<span class="comment">-- @param t table to check</span>
<span class="comment">-- @return `true` if `t` is an auto-table, `false` otherwise</span>
<span class="keyword">function</span> isautotable(t)
  <span class="keyword">if</span> <span class="library">type</span>(t) ~= <span class="string">"table"</span> <span class="keyword">then</span> <span class="keyword">return</span> <span class="keyword">false</span> <span class="keyword">end</span>
  <span class="keyword">return</span> ((<span class="library">getmetatable</span>(t) <span class="keyword">or</span> {}).__index == autotable__index)
<span class="keyword">end</span>

</pre>
</DL>
<p>
And some tests to verify (how) it works<p>
<DL>
<dt><dd><pre class="code">
<span class="keyword">local</span> deeptest = newautotable(0)
<span class="keyword">local</span> x = deeptest
<span class="keyword">for</span> n = 1, 100 <span class="keyword">do</span> x = x.a <span class="keyword">end</span>
x.final = <span class="string">"100 levels deep"</span>
x = deeptest
<span class="keyword">for</span> n = 1, 100 <span class="keyword">do</span> x = x.a <span class="keyword">end</span>
<span class="library">print</span>(<span class="string">"Created:"</span>,x.final)

<span class="keyword">local</span> testtable = newautotable(2)
<span class="library">print</span>(testtable.a.b)  <span class="comment">-- depth == 2, so a and b are autogenerated</span>
<span class="library">print</span>(testtable.a.b)  <span class="comment">-- but b is last level and no longer auto-table itself</span>
testtable.a.b.hello = <span class="string">"world"</span>
testtable.a.b.world = <span class="string">"hello"</span>

<span class="library">print</span>(testtable.a.b.hello)
<span class="library">print</span>(testtable.a.b.world)
<span class="library">print</span>(isautotable(testtable.a))
<span class="library">print</span>(isautotable(testtable.a.b))

<span class="library">table.insert</span>(testtable.a.b, <span class="string">"hello world 1"</span>)
<span class="library">table.insert</span>(testtable.a.b, <span class="string">"hello world 2"</span>)

<span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="library">pairs</span>(testtable.a.b) <span class="keyword">do</span> <span class="library">print</span>(k,v) <span class="keyword">end</span>

<span class="library">print</span>(testtable.a, isautotable(testtable.a))     <span class="comment">--&gt; table, true</span>
<span class="library">print</span>(testtable.a.b, isautotable(testtable.a.b)) <span class="comment">--&gt; table, false</span>
<span class="library">print</span>(testtable.a.b.c)                           <span class="comment">--&gt; nil</span>
<span class="library">print</span>(testtable.a.b.c.d)                         <span class="comment">--&gt; error</span>
</pre>
</DL>
<hr>
<a href="/wiki/RecentChanges" >RecentChanges</a> &middot; <a href="/cgi-bin/wiki.pl?action=editprefs" >preferences</a><br>
<a href="/cgi-bin/wiki.pl?action=edit&amp;id=AutomagicTables" >edit</a> &middot; <a href="/cgi-bin/wiki.pl?action=history&amp;id=AutomagicTables" >history</a><br>Last edited March 17, 2016 12:24 pm GMT <a href="/cgi-bin/wiki.pl?action=browse&amp;diff=1&amp;id=AutomagicTables" >(diff)</a>
</body>
</html>