<html>

 <head>
<!-- Original URL: http://book.luaer.cn/_57.htm
Date Downloaded: 2016/4/5 19:56:08 !-->
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
   <title>9.1 协同的基础 - Lua程序设计 </title>
   
   <meta name="GENERATOR" content="Macrobject Word-2-CHM" />
   <link rel="stylesheet" href="Word2Chm.css" type="text/css" />
   <link rel="stylesheet" href="default.css" type="text/css" />
 </head>

 <body lang="ZH-CN" link="blue" vlink="purple" style='text-justify-trim:punctuation'><div style="z-index: 9999; position: fixed; width: 100%; border: 0px; padding: 5px; margin: 0px; background-color: transparent;  font-size: 12pt; font-family: sans-serif;" id="web2disk_nag" onclick="javascript: document.getElementById('web2disk_nag').style.display = 'none';">
		<div style="color: #000000; background-color:#F1F1F1; margin-left: auto; margin-right: auto; border-width: 2px; border-style: solid; width: 550px; ">
			<div style="width: 100%; text-align: center; font-weight: bold; border: 0px; margin: 0px; padding: 0px">Hey, where did my words go? (Click to hide)</div>
			<p>In the trial version of Web2Disk every fifth word is blanked out. 
			To copy this site with all the words, please upgrade to the full version and copy this website again.</p>
			<div style="width: 100%; text-align: center; font-weight: bold; border: 0px; margin: 0px; padding: 0px">
				<a href="http://www.inspyder.com/products/Web2Disk/">Inspyder Web2Disk: The Website Downloader</a>
			</div>
		</div>
	</div>
   <table width="100%" cellpadding="0" cellspacing="0" border="0">
     <tr>
       <td class="moHeader">&nbsp;9.1 协同的基础 </td>
     </tr>
   </table>
  
   <p />

 <div class="Section1" style='layout-grid:15.6pt'>



 <p class="MsoNormal" style='text-indent:21.0pt'><span lang="EN-US">Lua </span><span style='font-family:宋体'>的所有协同函数存放于 </span><span lang="EN-US">coroutine table </span><span style='font-family:宋体'>中。 </span><span lang="EN-US">create </span><span style='font-family:宋体'>函数用于创建新的协同程序，其只有一个参数：一个函数，即协同程序将要运行的代码。若一切顺利，返回值为 </span><span lang="EN-US">thread </span><span style='font-family:宋体'>类型，表示创建成功。通常情况下， </span><span lang="EN-US">create </span><span style='font-family:宋体'>的参数是匿名函数： </span></p>

 <div style='border:RGB(81,236,211) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:RGB(243,232,248)'><span lang="EN-US">co = coroutine.create( <span style='color:blue'>function </span> () </span></p>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span lang="EN-US">&nbsp;&nbsp;&nbsp; print( <span style='color:red'>&quot;hi&quot; </span>) </span></p>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:RGB(247,245,249)'><span lang="EN-US" style='color:blue'>end </span><span lang="EN-US">) </span></p>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span lang="EN-US">&nbsp; </span></p>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:RGB(245,251,249)'><span lang="EN-US">print(co)&nbsp;&nbsp;&nbsp;&nbsp;  <span style='color:green'>--&gt;
thread: 0x8071d98 </span></span></p>

 </div>

 <p class="MsoNormal" style='text-indent:21.0pt'><span style='font-family:宋体'>协同有三个状态：挂起态（ </span><span lang="EN-US">suspended </span><span style='font-family:宋体'>）、运行态（ </span><span lang="EN-US">running </span><span style='font-family:宋体'>）、停止态（ </span><span lang="EN-US">dead </span><span style='font-family:宋体'>）。当我们创建协同程序成功时，其为挂起态，即此时协同程序并未运行。我们可用 </span><span lang="EN-US">status </span><span style='font-family:宋体'>函数检查协同的状态： </span></p>

 <div style='border:RGB(81,236,211) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:RGB(241,241,247)'><span lang="EN-US">print(coroutine.status(co))&nbsp;&nbsp;&nbsp;&nbsp;  <span style='color:green'>--&gt; suspended </span></span></p>

 </div>

 <p class="MsoNormal" style='text-indent:21.0pt'><span style='font-family:宋体'>函数 </span><span lang="EN-US">coroutine.resume </span><span style='font-family:宋体'>使协同程序由挂起状态变为运行态： </span></p>

 <div style='border:RGB(81,236,211) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:RGB(247,220,255)'><span lang="EN-US">coroutine.resume(co)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <span style='color:green'>--&gt; hi </span></span></p>

 </div>

 <p class="MsoNormal" style='text-indent:21.0pt'><span style='font-family:宋体'>本例中，协同程序打印出 </span><span lang="EN-US">&quot;hi&quot; </span><span style='font-family:宋体'>后，任务完成，便进入终止态： </span></p>

 <div style='border:RGB(81,236,211) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:RGB(240,244,253)'><span lang="EN-US">print(coroutine.status(co))&nbsp;&nbsp;&nbsp;&nbsp;  <span style='color:green'>--&gt; dead </span></span></p>

 </div>

 <p class="MsoNormal" style='text-indent:21.0pt'><span style='font-family:宋体'>当目前为止，协同看起来只是一种复杂的调用函数的方式，真正的强大之处体现在 </span><span lang="EN-US">yield </span><span style='font-family:宋体'>函数，它可以将正在运行的代码挂起，看一个例子： </span></p>

 <div style='border:RGB(81,236,211) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:RGB(247,249,232)'><span lang="EN-US">co = coroutine.create( <span style='color:blue'>function </span> () </span></p>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span lang="EN-US">&nbsp;&nbsp;&nbsp;  <span style='color:blue'>for </span> i=1,10  <span style='color:blue'>do </span></span></p>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:RGB(244,237,243)'><span lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print( <span style='color:red'>&quot;co&quot; </span>,
i) </span></p>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; coroutine.yield() </span></p>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:RGB(254,224,222)'><span lang="EN-US">&nbsp;&nbsp;&nbsp;  <span style='color:blue'>end </span></span></p>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span lang="EN-US" style='color:blue'>end </span><span lang="EN-US">) </span></p>

 </div>

 <p class="MsoNormal" style='text-indent:21.0pt'><span style='font-family:宋体'>执行这个协同程序，程序将在第一个 </span><span lang="EN-US">yield </span><span style='font-family:宋体'>处被挂起： </span></p>

 <div style='border:RGB(81,236,211) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(242,229,240);margin-left:21.0pt;margin-right:21.0pt'>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span lang="EN-US">coroutine.resume(co)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <span style='color:green'>--&gt; co&nbsp;&nbsp; 1 </span></span></p>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:RGB(255,251,235)'><span lang="EN-US">print(coroutine.status(co))&nbsp;&nbsp;&nbsp;&nbsp;  <span style='color:green'>--&gt; suspended </span></span></p>

 </div>

 <p class="MsoNormal" style='text-indent:21.0pt'><span style='font-family:宋体'>从协同的观点看：使用函数 </span><span lang="EN-US">yield </span><span style='font-family:宋体'>可以使程序挂起，当我们激活被挂起的程序时，将从函数 </span><span lang="EN-US">yield </span><span style='font-family:宋体'>的位置继续执行程序，直到再次遇到 </span><span lang="EN-US">yield </span><span style='font-family:宋体'>或程序结束。 </span></p>

 <div style='border:RGB(81,236,211) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:RGB(251,228,255)'><span lang="EN-US">coroutine.resume(co)&nbsp;&nbsp;&nbsp;&nbsp;  <span style='color:
green'>--&gt; co&nbsp;&nbsp; 2 </span></span></p>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span lang="EN-US">coroutine.resume(co)&nbsp;&nbsp;&nbsp;&nbsp;  <span style='color:
green'>--&gt; co&nbsp;&nbsp; 3 </span></span></p>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:RGB(227,234,228)'><span lang="EN-US">... </span></p>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span lang="EN-US">coroutine.resume(co)&nbsp;&nbsp;&nbsp;&nbsp;  <span style='color:
green'>--&gt; co&nbsp;&nbsp; 10 </span></span></p>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:RGB(220,249,255)'><span lang="EN-US">coroutine.resume(co)&nbsp;&nbsp;&nbsp;&nbsp;  <span style='color:
green'>-- prints nothing </span></span></p>

 </div>

 <p class="MsoNormal" style='text-indent:21.0pt'><span style='font-family:宋体'>上面最后一次调用时，协同体已结束，因此协同程序处于终止态。如果我们仍然希望激活它， </span><span lang="EN-US">resume </span><span style='font-family:宋体'>将返回 </span><span lang="EN-US">false </span><span style='font-family:宋体'>和错误信息。 </span></p>

 <div style='border:RGB(81,236,211) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:RGB(220,241,255)'><span lang="EN-US">print(coroutine.resume(co)) </span></p>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span lang="EN-US">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;  <span style='color:green'>--&gt;
false&nbsp;&nbsp; cannot resume dead _________ </span></span></p>

 </div>

 <p class="MsoNormal" style='text-indent:21.0pt'><span style='font-family:宋体'>注意： </span><span lang="EN-US">resume </span><span style='font-family:宋体'>运行在保护模式下，因此，如果协同程序内部存在错误， </span><span lang="EN-US">Lua </span><span style='font-family:宋体'>并不会抛出错误，而是将错误返回给 </span><span lang="EN-US">resume </span><span style='font-family:宋体'>函数。 </span></p>

 <p class="MsoNormal" style='text-indent:21.0pt'><span lang="EN-US">Lua </span><span style='font-family:宋体'>中协同的强大能力，还在于通过 </span><span lang="EN-US">resume-yield </span><span style='font-family:宋体'>来交换数据。 </span></p>

 <p class="MsoNormal" style='text-indent:21.0pt'><span style='font-family:宋体'>第一个例子中只有 </span><span lang="EN-US">resume </span><span style='font-family:宋体'>，没有 </span><span lang="EN-US">yield </span><span style='font-family:宋体'>， </span><span lang="EN-US">resume </span><span style='font-family:宋体'>把参数传递给协同的主程序。 </span></p>

 <div style='border:RGB(81,236,211) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(254,255,248);margin-left:21.0pt;margin-right:21.0pt'>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span lang="EN-US">co = coroutine.create( <span style='color:blue'>function </span>
(a,b,c) </span></p>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:RGB(252,226,225)'><span lang="EN-US">&nbsp;&nbsp;&nbsp; print( <span style='color:red'>&quot;co&quot; </span>,
a,b,c) </span></p>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span lang="EN-US" style='color:blue'>end </span><span lang="EN-US">) </span></p>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:RGB(228,230,255)'><span lang="EN-US">coroutine.resume(co, 1, 2, 3)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <span style='color:green'>--&gt; co&nbsp; 1&nbsp; 2&nbsp; 3 </span></span></p>

 </div>

 <p class="MsoNormal" style='text-indent:21.0pt'><span style='font-family:宋体'>第二个例子，数据由 </span><span lang="EN-US">yield </span><span style='font-family:宋体'>传给 </span><span lang="EN-US">resume </span><span style='font-family:宋体'>。 </span><span lang="EN-US">true </span><span style='font-family:宋体'>表明调用成功， </span><span lang="EN-US">true </span><span style='font-family:宋体'>之后的部分，即是 </span><span lang="EN-US">yield </span><span style='font-family:宋体'>的参数。 </span></p>

 <div style='border:RGB(81,236,211) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:RGB(254,255,234)'><span lang="EN-US">co = coroutine.create( <span style='color:blue'>function </span> (a,b) </span></p>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span lang="EN-US">&nbsp;&nbsp;&nbsp; coroutine.yield(a + b, _ - b) </span></p>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:RGB(227,234,243)'><span lang="EN-US" style='color:blue'>end </span><span lang="EN-US">) </span></p>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span lang="EN-US">print(coroutine.resume(co, 20, 10))&nbsp;&nbsp;&nbsp;  <span style='color:green'>--&gt; true&nbsp; 30&nbsp; 10 </span></span></p>

 </div>

 <p class="MsoNormal" style='text-indent:21.0pt'><span style='font-family:宋体'>相应地， </span><span lang="EN-US">resume </span><span style='font-family:宋体'>的参数，会被传递给 </span><span lang="EN-US">yield </span><span style='font-family:宋体'>。 </span><span lang="EN-US">  </span></p>

 <div style='border:RGB(81,236,211) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(253,227,253);margin-left:21.0pt;margin-right:21.0pt'>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span lang="EN-US">co = coroutine.create ( <span style='color:blue'>function </span> () </span></p>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:RGB(231,223,249)'><span lang="EN-US">&nbsp;&nbsp;&nbsp; print( <span style='color:red'>&quot;co&quot; </span>,
coroutine.yield()) </span></p>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span lang="EN-US" style='color:blue'>end </span><span lang="EN-US">) </span></p>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:RGB(239,241,241)'><span lang="EN-US">coroutine.resume(co) </span></p>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span lang="EN-US">coroutine.resume(co, 4, 5)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <span style='color:green'>--&gt; co&nbsp; 4&nbsp; 5 </span></span></p>

 </div>

 <p class="MsoNormal" style='text-indent:21.0pt'><span style='font-family:宋体'>最后一个例子，协同代码结束时的返回值，也会传给 </span><span lang="EN-US">resume </span><span style='font-family:宋体'>： </span></p>

 <div style='border:RGB(81,236,211) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(233,243,239);margin-left:21.0pt;margin-right:21.0pt'>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span lang="EN-US">co = coroutine.create( <span style='color:blue'>function </span> () </span></p>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:RGB(245,247,229)'><span lang="EN-US">&nbsp;&nbsp;&nbsp;  <span style='color:blue'>return </span> 6, 7 </span></p>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span lang="EN-US" style='color:blue'>end </span><span lang="EN-US">) </span></p>

 <p class="AltD" style='margin:0cm;margin-bottom:.0001pt;background:RGB(248,223,230)'><span lang="EN-US">print(coroutine.resume(co))&nbsp;&nbsp;&nbsp;&nbsp;  <span style='color:green'>--&gt; true&nbsp; 6&nbsp; 7 </span></span></p>

 </div>

 <p class="MsoNormal" style='text-indent:21.0pt'><span style='font-family:宋体'>我们很少在一个协同程序中同时使用多个特性，但每一种都有用处。 </span></p>

 <p class="MsoNormal" style='text-indent:21.0pt'><span style='font-family:宋体'>现在已大体了解了协同的基础内容，在我们继续学习之前，先澄清两个概念： </span><span lang="EN-US">Lua </span><span style='font-family:宋体'>的协同称为不对称协同（ </span><span lang="EN-US">asymmetric coroutines </span><span style='font-family:宋体'>），指“挂起一个正在执行的协同函数”与“使一个被挂起的协同再次执行的函数”是不同的，有些语言提供对称协同（ </span><span lang="EN-US">symmetric coroutines </span><span style='font-family:宋体'>），即使用同一个函数负责“执行与挂起间的状态切换”。 </span></p>

 <p class="MsoNormal" style='text-indent:21.0pt'><span style='font-family:宋体'>有人称不对称的协同为半协同，另一些人使用同样的术语表示真正的协同，严格意义上的协同不论在什么地方只要它不是在其他的辅助代码内部的时候都可以并且只能使执行挂起，不论什么时候在其控制栈内都不会有不可决定的调用。（ </span><span lang="EN-US">However, other people use ___ same term semi-coroutine to ______ a
restricted implementation of coroutines, _____ a coroutine can only _______ its
execution when it is ___ inside any auxiliary function, ____ is, when it has __
_______ calls in its control _____. </span><span style='font-family:宋体'>）。只有半协同程序内部可以使用 </span><span lang="EN-US">yield </span><span style='font-family:宋体'>， </span><span lang="EN-US">python </span><span style='font-family:宋体'>中的产生器（ </span><span lang="EN-US">generator </span><span style='font-family:宋体'>）就是这种类型的半协同。 </span></p>

 <p class="MsoNormal" style='text-indent:21.0pt'><span style='font-family:宋体'>与对称的协同和不对称协同的区别不同的是，协同与产生器的区别更大。产生器相对比较简单，他不能完成真正的协同所能完成的一些任务。我们熟练使用不对称的协同之后，可以利用不对称的协同实现比较优越的对称协同。 </span></p>


 </div>
   <p />
   <hr class="moHR" />
   <span class="moCopyright">
    ____：
 <br /><a href="_3.htm">lua程序设计目录 </a> -  <a href="http://www.luaer.cn">中国lua开发者 </a> -  <a href="http://bbs.luaer.cn">lua论坛 </a> 
   </span><div id="bookfoot"></div>
 <script language="JavaScript" src="js/ad.js"></script>
 </body>

 </html>

 