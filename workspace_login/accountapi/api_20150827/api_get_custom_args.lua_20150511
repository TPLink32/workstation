-- local common_path = './?.lua;../public/?.lua;../include/?.lua;'
-- package.path = common_path .. package.path
--   

local ngx = require('ngx')
local only = require('only')
local msg = require('msg')
local gosay = require('gosay')
local redis_pool_api = require('redis_pool_api')
local mysql_pool_api = require('mysql_pool_api')
local utils = require('utils')
local app_utils = require('app_utils')
local safe = require('safe')

local sql_fmt = {

	sl_args = "SELECT call1,call2,domain,port,customArgs FROM configInfo WHERE accountID='%s' AND model='%s'",
	sl_default = "SELECT call1,call2,domain,port,customArgs FROM configInfo WHERE accountID='' AND model='%s'",
	sel = "SELECT imei FROM userlist where accountID = '%s'",
}

local url_info = {
	type_name = 'system',
	app_key = nil,
	client_host = nil,
	client_body = nil,
}
local function parse_body(str)

	local args = utils.parse_url(str)
	url_info['app_key'] = args['appKey']

       if args['accountID'] then
               if #args['accountID']>0 then
                   if not app_utils.check_accountID(args['accountID']) then
                       gosay.go_false(url_info, msg['MSG_ERROR_REQ_ARG'], "accountID")
                   end
               end
       end
       args['accountID']=args['accountID'] or ''

	if not args['model'] or #args['model'] == 0 then
        	gosay.go_false(url_info, msg['MSG_ERROR_REQ_ARG'], "model")
	end

	safe.sign_check(args, url_info)

	return args
end


local function func(handle_body)

	local sql = string.format(sql_fmt.sl_args, handle_body['accountID'],handle_body['model'])
	only.log('D', sql)
	local ok, ret = mysql_pool_api.cmd('app_mirrtalk___config', 'select', sql)
	if not ok then
		gosay.go_false(url_info, msg["MSG_DO_MYSQL_FAILED"])
	end
	only.log('D',string.format("sel_ret = %s",ret))	

	if #ret == 0 then
	

		local sql = string.format(sql_fmt.sel, handle_body['accountID'])
		only.log('D', sql)
		local ok, res = mysql_pool_api.cmd('app_usercenter___usercenter', 'select', sql)
		if not ok then
			gosay.go_false(url_info, msg["MSG_DO_MYSQL_FAILED"])
		end

		if #res == 0 then
			gosay.go_false(url_info, msg["MSG_ERROR_ACCOUNT_ID_NOT_EXIST"])
		end

		local sql = string.format(sql_fmt.sl_default, handle_body['model'])
		only.log('D', sql)
		local ok, res = mysql_pool_api.cmd('app_mirrtalk___config', 'select', sql)
		if not ok then
			gosay.go_false(url_info, msg["MSG_DO_MYSQL_FAILED"])
		end
		only.log('D',string.format("sel_ret000 = %s",res))	
		
		ok,res[1]['customArgs'] = utils.json_decode(res[1]['customArgs'])

		local ok,ret = utils.json_encode(res[1])
		local flags = 1
		return flags,res

	elseif #ret > 1 then
		only.log('D', string.format('too many record of accountID:%s in config.configInfo', handle_body['accountID']))
		gosay.go_false(url_info, msg["MSG_ERROR_MORE_RECORD"], 'accountID')

	else

		ok,ret[1]['customArgs'] = utils.json_decode(ret[1]['customArgs'])

		local flags = 2
		only.log('D')
		local ok,res = utils.json_encode(ret[1])
		return flags,res
	end
end

local function handle()

	local pool_body = ngx.req.get_body_data()
	local ip = ngx.var.remote_addr

	url_info['client_host'] = ip
	url_info['client_body'] = body

	local handle_body = parse_body(pool_body)

	local flag ,ret = func(handle_body)

	gosay.go_success(url_info, msg['MSG_SUCCESS_WITH_RESULT'], ret)

end

safe.main_call( handle )
